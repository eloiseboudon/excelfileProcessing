PYTHON := python3
VENV := backend/.venv
PIP := $(VENV)/bin/pip
USER := postgres
PYTHON_VENV := $(VENV)/bin/python
MSG := "Auto migration"
DC := docker compose
SERVICE ?=

.PHONY: help docker-build docker-up docker-down docker-logs docker-build-% docker-up-% docker-down-% docker-logs-% shell shell-% alembic-init alembic-migrate alembic-upgrade alembic-current alembic-history clean-branches frontend-dev npm-fix npm-clean docker-build-fix implement-tables reset-database check-tables list-brands list-colors network-debug test-connectivity test-api test-frontend test-database test-all fix-network dev-start dev-stop dev-restart-backend dev-restart-frontend dev-logs dev-logs-backend dev-logs-frontend dev-status

help:
	@echo "Commandes disponibles:"
	@echo ""
	@echo "üöÄ D√âVELOPPEMENT (Hot-Reload):"
	@echo "  dev-start                 - D√©marrer l'environnement de d√©veloppement"
	@echo "  dev-stop                  - Arr√™ter l'environnement de d√©veloppement"
	@echo "  dev-status                - Voir le statut du d√©veloppement"
	@echo "  dev-logs                  - Voir les logs en temps r√©el"
	@echo "  dev-restart-backend       - Red√©marrer seulement le backend"
	@echo "  dev-restart-frontend      - Red√©marrer seulement le frontend"
	@echo ""
	@echo "üê≥ DOCKER:"
	@echo "  docker-build [SERVICE=nom] - Construire les images Docker"
	@echo "  docker-build-fix          - Construire avec correction des d√©pendances"
	@echo "  docker-up [SERVICE=nom]    - D√©marrer les services"
	@echo "  docker-down [SERVICE=nom]  - Arr√™ter les services"
	@echo "  docker-logs [SERVICE=nom]  - Voir les logs"
	@echo ""
	@echo "üåê FRONTEND:"
	@echo "  npm-fix                   - Corriger les d√©pendances npm"
	@echo "  npm-clean                 - Nettoyage complet npm"
	@echo "  frontend-dev              - D√©marrer le frontend en mode d√©veloppement"
	@echo "  frontend-build            - Construire le frontend"
	@echo "  frontend-logs             - Voir les logs du frontend"
	@echo ""
	@echo "üóÉÔ∏è BASE DE DONN√âES:"
	@echo "  alembic-init              - Initialiser Alembic (une seule fois)"
	@echo "  alembic-migrate           - Cr√©er une nouvelle migration"
	@echo "  alembic-upgrade           - Appliquer les migrations"
	@echo "  implement-tables          - Impl√©menter les tables avec les donn√©es initiales"
	@echo "  reset-database            - R√©initialiser compl√®tement la base de donn√©es"
	@echo "  check-tables              - V√©rifier le contenu des tables"
	@echo ""
	@echo "üß™ TESTS:"
	@echo "  test-connectivity         - Tester la connectivit√© entre services"
	@echo "  test-api                  - Tester toutes les APIs"
	@echo "  test-all                  - Ex√©cuter tous les tests"
	@echo "  network-debug             - Diagnostiquer les probl√®mes r√©seau"
	@echo ""
	@echo "üèóÔ∏è SETUP:"
	@echo "  dev-setup                 - Configuration compl√®te pour le d√©veloppement"
	@echo "  prod-setup                - Configuration pour la production"

# Correction des d√©pendances npm
npm-fix:
	@echo "=== Correction des d√©pendances npm ==="
	@echo "Suppression du package-lock.json obsol√®te..."
	@rm -f frontend/package-lock.json
	@echo "R√©g√©n√©ration des d√©pendances..."
	@cd frontend && npm install
	@echo "D√©pendances corrig√©es ‚úÖ"

npm-clean:
	@echo "=== Nettoyage complet npm ==="
	@rm -rf frontend/node_modules frontend/package-lock.json
	@cd frontend && npm install
	@echo "Nettoyage termin√© ‚úÖ"

# Construction avec correction automatique
docker-build-fix:
	@echo "=== Construction avec correction des d√©pendances ==="
	@make npm-fix
	@make docker-build

# Docker commands
docker-build:
	$(DC) build $(SERVICE)

docker-up:
	$(DC) up -d $(SERVICE)
	@if [ -z "$(SERVICE)" ]; then \
		echo "Services d√©marr√©s:"; \
		echo "  - PostgreSQL: localhost:5432"; \
		echo "  - Backend: localhost:5001"; \
		echo "  - Frontend: http://localhost:3000"; \
	fi

docker-down:
	@if [ -z "$(SERVICE)" ]; then \
		$(DC) down; \
	else \
		$(DC) stop $(SERVICE); \
		$(DC) rm -f $(SERVICE); \
	fi

docker-restart: docker-down docker-up

docker-logs:
	$(DC) logs -f $(SERVICE)

# Frontend specific commands
frontend-build:
	$(DC) build frontend

frontend-dev:
	@echo "Construction de l'image frontend-dev..."
	$(DC) --profile dev build frontend-dev
	@echo "D√©marrage du frontend de d√©veloppement..."
	$(DC) --profile dev up -d frontend-dev
	@echo "Attente du d√©marrage du serveur..."
	@sleep 5
	@echo "V√©rification du statut..."
	@docker compose ps frontend-dev
	@echo "Frontend de d√©veloppement accessible sur http://localhost:5173"
	@echo "Logs disponibles avec: make frontend-dev-logs"

frontend-dev-logs:
	$(DC) logs -f frontend-dev

frontend-dev-shell:
	$(DC) exec frontend-dev sh

frontend-logs:
	$(DC) logs -f frontend

frontend-stop:
	$(DC) stop frontend frontend-dev

frontend-restart:
	$(DC) restart frontend

frontend-dev-debug:
	@echo "=== Diagnostic complet du frontend-dev ==="
	@echo "1. Statut du conteneur:"
	@docker compose ps frontend-dev
	@echo -e "\n2. Ports mapp√©s:"
	@docker port ajt_frontend_dev 2>/dev/null || echo "Conteneur non trouv√©"
	@echo -e "\n3. Processus dans le conteneur:"
	@docker compose exec frontend-dev ps aux 2>/dev/null || echo "Conteneur non accessible"
	@echo -e "\n4. Ports ouverts dans le conteneur:"
	@docker compose exec frontend-dev netstat -tlnp 2>/dev/null || echo "Conteneur non accessible"
	@echo -e "\n5. Test de connectivit√© local:"
	@curl -s -o /dev/null -w "HTTP Status: %{http_code}\n" http://localhost:5173 || echo "Service non accessible"
	@echo -e "\n6. Test depuis le conteneur:"
	@docker compose exec frontend-dev curl -s -o /dev/null -w "HTTP Status: %{http_code}\n" http://localhost:5173 2>/dev/null || echo "Test interne √©chou√©"
	@echo -e "\n7. Logs r√©cents:"
	@docker compose logs --tail=20 frontend-dev

frontend-dev-rebuild:
	@echo "=== Reconstruction du frontend-dev ==="
	$(DC) stop frontend-dev 2>/dev/null || true
	$(DC) rm -f frontend-dev 2>/dev/null || true
	$(DC) --profile dev build --no-cache frontend-dev
	@echo "=== Red√©marrage du service ==="
	$(DC) --profile dev up -d frontend-dev
	@echo "=== Attente du d√©marrage ==="
	@sleep 5
	@echo "=== Diagnostic ==="
	@make frontend-dev-debug

frontend-dev-fix:
	@echo "=== Correction compl√®te du frontend-dev ==="
	@echo "1. Arr√™t du service"
	@$(DC) stop frontend-dev 2>/dev/null || true
	@$(DC) rm -f frontend-dev 2>/dev/null || true
	@echo "2. Nettoyage des images"
	@docker rmi -f $$(docker images -q "*frontend-dev*") 2>/dev/null || true
	@echo "3. Reconstruction"
	@$(DC) --profile dev build --no-cache frontend-dev
	@echo "4. Red√©marrage"
	@$(DC) --profile dev up -d frontend-dev
	@echo "5. V√©rification"
	@sleep 8
	@make frontend-dev-debug

# Backend specific commands
backend-build:
	$(DC) build backend

backend-logs:
	$(DC) logs -f backend

backend-restart:
	$(DC) restart backend

# Database commands
db-logs:
	$(DC) logs -f postgres

db-backup:
	docker compose exec postgres pg_dump -U postgres ajtpro > backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "Backup cr√©√©: backup_$(shell date +%Y%m%d_%H%M%S).sql"

db-restore:
	@if [ -z "$(BACKUP_FILE)" ]; then \
		echo "Usage: make db-restore BACKUP_FILE=backup_file.sql"; \
		exit 1; \
	fi
	cat $(BACKUP_FILE) | docker compose exec -T postgres psql -U postgres ajtpro

# R√®gles g√©n√©riques pour un service
docker-build-%:
	$(DC) build $*

docker-up-%:
	$(DC) up -d $*

docker-down-%:
	$(DC) stop $*
	$(DC) rm -f $*

docker-logs-%:
	$(DC) logs -f $*

shell-%:
	docker compose exec $* sh

# Commandes Alembic (toutes dans Docker)
alembic-init:
	docker compose run --rm backend alembic init alembic
	@echo "Alembic initialis√©. Pensez √† configurer env.py"

alembic-migrate:
	docker compose run --rm backend alembic revision --autogenerate -m $(MSG)
	@echo "Migration cr√©√©e avec le message: $(MSG)"

alembic-upgrade:
	docker compose exec backend alembic upgrade head
	@echo "Migrations appliqu√©es"

alembic-downgrade:
	docker compose exec backend alembic downgrade -1
	@echo "Migration pr√©c√©dente annul√©e"

alembic-current:
	docker compose exec backend alembic current

alembic-history:
	docker compose exec backend alembic history --verbose

# Commandes de gestion des donn√©es
implement-tables:
	@echo "=== Impl√©mentation des tables avec les donn√©es initiales ==="
	docker compose exec backend python implement_tables.py
	@echo "Tables impl√©ment√©es avec succ√®s ‚úÖ"

implement-tables-run:
	@echo "=== Impl√©mentation des tables (avec run si le conteneur n'est pas d√©marr√©) ==="
	docker compose run --rm backend python implement_tables.py
	@echo "Tables impl√©ment√©es avec succ√®s ‚úÖ"

reset-database:
	@echo "=== R√©initialisation compl√®te de la base de donn√©es ==="
	@echo "‚ö†Ô∏è  ATTENTION: Ceci va supprimer toutes les donn√©es existantes!"
	@read -p "√ätes-vous s√ªr de vouloir continuer? (y/N): " confirm && [ "$confirm" = "y" ] || exit 1
	@make implement-tables
	@echo "Base de donn√©es r√©initialis√©e ‚úÖ"

populate-db: implement-tables
	@echo "Alias pour implement-tables"

seed-database: implement-tables
	@echo "Alias pour implement-tables"

# Commandes de v√©rification des donn√©es
check-tables:
	@echo "=== V√©rification des tables ==="
	@echo "Suppliers:"
	@docker compose exec backend python -c "import psycopg2; import os; conn = psycopg2.connect(os.getenv('DATABASE_URL')); cur = conn.cursor(); cur.execute('SELECT COUNT(*) FROM suppliers'); print(f'  - {cur.fetchone()[0]} suppliers'); cur.close(); conn.close()"
	@echo "Brands:"
	@docker compose exec backend python -c "import psycopg2; import os; conn = psycopg2.connect(os.getenv('DATABASE_URL')); cur = conn.cursor(); cur.execute('SELECT COUNT(*) FROM brands'); print(f'  - {cur.fetchone()[0]} brands'); cur.close(); conn.close()"
	@echo "Colors:"
	@docker compose exec backend python -c "import psycopg2; import os; conn = psycopg2.connect(os.getenv('DATABASE_URL')); cur = conn.cursor(); cur.execute('SELECT COUNT(*) FROM colors'); print(f'  - {cur.fetchone()[0]} colors'); cur.close(); conn.close()"
	@echo "Device Types:"
	@docker compose exec backend python -c "import psycopg2; import os; conn = psycopg2.connect(os.getenv('DATABASE_URL')); cur = conn.cursor(); cur.execute('SELECT COUNT(*) FROM device_types'); print(f'  - {cur.fetchone()[0]} device types'); cur.close(); conn.close()"

list-brands:
	@echo "=== Liste des marques ==="
	@docker compose exec backend python -c "import psycopg2; import os; conn = psycopg2.connect(os.getenv('DATABASE_URL')); cur = conn.cursor(); cur.execute('SELECT brand FROM brands ORDER BY brand'); [print(f'  - {row[0]}') for row in cur.fetchall()]; cur.close(); conn.close()"

# Diagnostic r√©seau et connectivit√©
network-debug:
	@echo "=== Diagnostic r√©seau Docker ==="
	@echo "1. R√©seaux Docker:"
	@docker network ls
	@echo -e "\n2. Conteneurs et leurs IPs:"
	@docker compose ps
	@echo -e "\n3. Test de connectivit√© interne:"
	@docker compose exec frontend ping -c 3 backend 2>/dev/null || echo "‚ùå Frontend ne peut pas joindre le backend"
	@docker compose exec backend ping -c 3 postgres 2>/dev/null || echo "‚ùå Backend ne peut pas joindre postgres"
	@echo -e "\n4. Ports ouverts sur l'h√¥te:"
	@netstat -tlnp 2>/dev/null | grep -E "(3000|5001|5432)" || echo "‚ùå Ports non ouverts"
	@echo -e "\n5. Test d'acc√®s externe:"
	@curl -I http://localhost:3000 2>/dev/null || echo "‚ùå Frontend non accessible"
	@curl -I http://localhost:5001 2>/dev/null || echo "‚ùå Backend non accessible"

test-connectivity:
	@echo "=== Test de connectivit√© ==="
	@echo "Frontend -> Backend:"
	@docker compose exec frontend curl -I http://backend:5001 2>/dev/null && echo "‚úÖ Frontend -> Backend OK" || echo "‚ùå Frontend -> Backend KO"
	@echo "Backend -> Database:"
	@docker compose exec backend python -c "import psycopg2; import os; psycopg2.connect(os.getenv('DATABASE_URL')); print('‚úÖ Backend -> Database OK')" 2>/dev/null || echo "‚ùå Backend -> Database KO"
	@echo "External -> Frontend:"
	@curl -I http://localhost:3000 2>/dev/null && echo "‚úÖ External -> Frontend OK" || echo "‚ùå External -> Frontend KO"
	@echo "External -> Backend:"
	@curl -I http://localhost:5001 2>/dev/null && echo "‚úÖ External -> Backend OK" || echo "‚ùå External -> Backend KO"
	@echo "Backend API endpoints:"
	@curl -s http://localhost:5001/health 2>/dev/null | grep -q "healthy" && echo "‚úÖ Health endpoint OK" || echo "‚ùå Health endpoint KO"
	@curl -s http://localhost:5001/api/brands 2>/dev/null | grep -q "brands" && echo "‚úÖ Brands API OK" || echo "‚ùå Brands API KO"
	@curl -s http://localhost:5001/api/colors 2>/dev/null | grep -q "colors" && echo "‚úÖ Colors API OK" || echo "‚ùå Colors API KO"

test-api:
	@echo "=== Test des APIs ==="
	@echo "Health Check:"
	@curl -s http://localhost:5001/health | python -m json.tool 2>/dev/null || echo "‚ùå Health API non disponible"
	@echo -e "\nBrands API:"
	@curl -s http://localhost:5001/api/brands | python -m json.tool 2>/dev/null || echo "‚ùå Brands API non disponible"
	@echo -e "\nColors API:"
	@curl -s http://localhost:5001/api/colors | python -m json.tool 2>/dev/null || echo "‚ùå Colors API non disponible"
	@echo -e "\nSuppliers API:"
	@curl -s http://localhost:5001/api/suppliers | python -m json.tool 2>/dev/null || echo "‚ùå Suppliers API non disponible"

test-frontend:
	@echo "=== Test du Frontend ==="
	@echo "Acc√®s au frontend:"
	@curl -I http://localhost:3000 2>/dev/null && echo "‚úÖ Frontend accessible" || echo "‚ùå Frontend non accessible"
	@echo "Test JavaScript (si disponible):"
	@curl -s http://localhost:3000 | grep -q "root" && echo "‚úÖ Index.html charg√©" || echo "‚ùå Index.html non charg√©"

test-database:
	@echo "=== Test de la base de donn√©es ==="
	@echo "Connexion √† la base de donn√©es:"
	@docker compose exec backend python -c "import psycopg2; import os; conn = psycopg2.connect(os.getenv('DATABASE_URL')); cur = conn.cursor(); cur.execute('SELECT 1'); print('‚úÖ Database connection OK'); cur.close(); conn.close()" 2>/dev/null || echo "‚ùå Database connection failed"
	@echo "Test des donn√©es:"
	@docker compose exec backend python -c "import psycopg2; import os; conn = psycopg2.connect(os.getenv('DATABASE_URL')); cur = conn.cursor(); cur.execute('SELECT COUNT(*) FROM brands'); print(f'‚úÖ Brands in DB: {cur.fetchone()[0]}'); cur.close(); conn.close()" 2>/dev/null || echo "‚ùå No brands data"

test-all: test-connectivity test-api test-frontend test-database
	@echo "=== Tous les tests termin√©s ==="

fix-network:
	@echo "=== Tentative de correction r√©seau ==="
	@echo "Red√©marrage des services avec reconstruction du r√©seau..."
	@docker compose down
	@docker network prune -f
	@docker compose up -d
	@echo "Attente du d√©marrage des services..."
	@sleep 10
	@make test-connectivity

# Commandes de d√©veloppement
dev-setup: docker-build docker-up alembic-upgrade implement-tables
	@echo "Environnement de d√©veloppement pr√™t!"
	@echo "  - Frontend: http://localhost:3000"
	@echo "  - Backend: http://localhost:5001"
	@echo "  - Database: localhost:5432"
	@echo "  - Tables initialis√©es avec les donn√©es de r√©f√©rence ‚úÖ"

dev-setup-quick: docker-up alembic-upgrade implement-tables
	@echo "D√©marrage rapide (sans rebuild) termin√©!"

prod-setup: docker-build docker-up alembic-upgrade implement-tables
	@echo "Environnement de production pr√™t!"

# Commandes sp√©ciales pour le d√©veloppement
dev-start:
	@echo "=== D√©marrage environnement de d√©veloppement ==="
	@echo "üîß D√©marrage des services backend + database..."
	@$(DC) up -d postgres backend
	@echo "‚è≥ Attente du backend..."
	@sleep 5
	@echo "üé® D√©marrage du frontend avec hot-reload..."
	@$(DC) --profile dev up -d frontend-dev
	@echo "‚úÖ Environnement de d√©veloppement pr√™t:"
	@echo "  - Backend (hot-reload): http://localhost:5001"
	@echo "  - Frontend (hot-reload): http://localhost:5173"
	@echo "  - Database: localhost:5432"
	@echo ""
	@echo "üí° Modifications automatiquement d√©tect√©es:"
	@echo "  - Backend: Toute modification .py dans backend/"
	@echo "  - Frontend: Toute modification dans frontend/src/"

dev-stop:
	@echo "=== Arr√™t environnement de d√©veloppement ==="
	@$(DC) stop backend postgres frontend-dev
	@echo "‚úÖ Environnement de d√©veloppement arr√™t√©"

dev-restart-backend:
	@echo "=== Red√©marrage backend seulement ==="
	@$(DC) restart backend
	@echo "‚úÖ Backend red√©marr√©"

dev-restart-frontend:
	@echo "=== Red√©marrage frontend seulement ==="
	@$(DC) --profile dev restart frontend-dev
	@echo "‚úÖ Frontend red√©marr√©"

dev-logs:
	@echo "=== Logs du d√©veloppement ==="
	@$(DC) logs -f backend frontend-dev

dev-logs-backend:
	@echo "=== Logs backend ==="
	@$(DC) logs -f backend

dev-logs-frontend:
	@echo "=== Logs frontend ==="
	@$(DC) logs -f frontend-dev

dev-status:
	@echo "=== Statut d√©veloppement ==="
	@echo "Services actifs:"
	@$(DC) ps postgres backend frontend-dev
	@echo ""
	@echo "Test de connectivit√©:"
	@curl -s http://localhost:5001/health >/dev/null 2>&1 && echo "‚úÖ Backend: OK" || echo "‚ùå Backend: KO"
	@curl -s http://localhost:5173 >/dev/null 2>&1 && echo "‚úÖ Frontend: OK" || echo "‚ùå Frontend: KO"

dev-reset: docker-down
	docker volume rm $$(docker volume ls -q | grep postgres_data) 2>/dev/null || true
	$(MAKE) dev-setup

# Shell dans les conteneurs
shell-backend:
	docker compose exec backend bash

shell-frontend:
	docker compose exec frontend sh

shell-postgres:
	docker compose exec postgres psql -U postgres -d ajtpro

# Tests
test-backend:
	docker compose exec backend python -m pytest

test-frontend:
	docker compose exec frontend npm test

# Monitoring
status:
	$(DC) ps

health:
	@echo "V√©rification de l'√©tat des services..."
	@docker compose exec backend curl -f http://localhost:5001/health || echo "Backend: ‚ùå"
	@curl -f http://localhost:3000 > /dev/null 2>&1 && echo "Frontend: ‚úÖ" || echo "Frontend: ‚ùå"
	@docker compose exec postgres pg_isready -U postgres > /dev/null 2>&1 && echo "Database: ‚úÖ" || echo "Database: ‚ùå"

# Nettoyage
clean:
	$(DC) down -v
	docker system prune -f
	rm -rf $(VENV)

clean-frontend:
	$(DC) down frontend frontend-dev
	docker rmi -f $$(docker images -q "*frontend*") 2>/dev/null || true

clean-all: clean
	docker system prune -a -f
	docker volume prune -f

# Git utilities
clean-branches:
	git branch | grep -v -E "(main|dev|\*)" | xargs git branch -d