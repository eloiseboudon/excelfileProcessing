#!/usr/bin/env python3
"""
Script d'import simplifi√© pour lier les produits Odoo avec les produits de la base.

Utilisation:
    python import_odoo_products_simple.py products_odoo_20251023.csv

Le fichier CSV doit avoir:
    - Ligne 1: en-t√™te (ignor√©)
    - Colonne 1: odoo_id
    - Colonne 2: nom du mod√®le √† chercher dans la table products
"""

import csv
import os
import sys
from datetime import datetime
from typing import Optional, Tuple
from urllib.parse import urlparse

import psycopg2
from dotenv import load_dotenv
from psycopg2.extensions import connection
from psycopg2.extras import DictCursor


class ImportLogger:
    """Logger pour suivre les op√©rations d'import."""

    def __init__(self, verbose: bool = False):
        self.log_file = f"import_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        self.verbose = verbose
        self.stats = {
            'total': 0,
            'found_and_linked': 0,
            'created_and_linked': 0,
            'already_linked': 0,
            'errors': 0,
        }

    def log(self, message: str, level: str = "INFO"):
        """√âcrire un message dans le fichier de log et l'afficher."""
        # Ne pas afficher les messages DEBUG √† l'√©cran si verbose=False
        if level == "DEBUG" and not self.verbose:
            # Mais toujours les √©crire dans le fichier
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            log_message = f"[{timestamp}] [{level}] {message}"
            with open(self.log_file, 'a', encoding='utf-8') as f:
                f.write(log_message + '\n')
            return

        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        log_message = f"[{timestamp}] [{level}] {message}"
        print(log_message)

        with open(self.log_file, 'a', encoding='utf-8') as f:
            f.write(log_message + '\n')

    def log_summary(self):
        """Afficher le r√©sum√© des op√©rations."""
        self.log("\n" + "=" * 80)
        self.log("üìä R√âSUM√â DE L'IMPORT")
        self.log("=" * 80)
        self.log(f"üìù Total de lignes trait√©es: {self.stats['total']}")
        self.log(f"‚úÖ Produits trouv√©s et li√©s: {self.stats['found_and_linked']}")
        self.log(f"‚ûï Produits cr√©√©s et li√©s: {self.stats['created_and_linked']}")
        self.log(f"üîó Liens d√©j√† existants: {self.stats['already_linked']}")
        self.log(f"‚ùå Erreurs: {self.stats['errors']}")
        self.log("=" * 80)
        self.log(f"üìÑ Log complet disponible dans: {self.log_file}")


def get_database_connection() -> connection:
    """√âtablir la connexion √† la base de donn√©es."""
    load_dotenv()

    database_url = os.getenv('DATABASE_URL')

    if database_url:
        # Parser l'URL de connexion
        parsed = urlparse(database_url)
        # Remplacer postgresql+psycopg2 par postgresql si n√©cessaire
        if parsed.scheme in ('postgresql+psycopg2', 'postgres'):
            database_url = database_url.replace(parsed.scheme, 'postgresql', 1)

        conn = psycopg2.connect(database_url, cursor_factory=DictCursor)
    else:
        # Connexion √† partir des variables individuelles
        conn = psycopg2.connect(
            dbname=os.getenv('POSTGRES_DB', 'tpvs_db'),
            user=os.getenv('POSTGRES_USER', 'postgres'),
            password=os.getenv('POSTGRES_PASSWORD', ''),
            host=os.getenv('POSTGRES_HOST', 'localhost'),
            port=os.getenv('POSTGRES_PORT', '5432'),
            cursor_factory=DictCursor,
        )

    return conn


def ensure_internal_products_table(conn: connection, logger: ImportLogger) -> bool:
    """Cr√©er la table internal_products si elle n'existe pas."""
    try:
        with conn.cursor() as cursor:
            # V√©rifier si la table existe
            cursor.execute(
                """
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'internal_products'
                )
            """
            )
            exists = cursor.fetchone()[0]

            if not exists:
                logger.log("Cr√©ation de la table internal_products...")
                cursor.execute(
                    """
                    CREATE TABLE internal_products (
                        id SERIAL PRIMARY KEY,
                        product_id INTEGER NOT NULL REFERENCES products(id) ON DELETE CASCADE,
                        odoo_id VARCHAR(200) NOT NULL,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """
                )

                # Ajouter les index uniques
                cursor.execute(
                    """
                    CREATE UNIQUE INDEX idx_internal_products_odoo_id_unique
                        ON internal_products (odoo_id)
                """
                )
                cursor.execute(
                    """
                    CREATE UNIQUE INDEX idx_internal_products_product_id_unique
                        ON internal_products (product_id)
                """
                )

                conn.commit()
                logger.log("‚úÖ Table internal_products cr√©√©e avec succ√®s", "SUCCESS")
            else:
                logger.log("‚úì Table internal_products existe d√©j√†")

            return True
    except Exception as e:
        conn.rollback()
        logger.log(f"‚ùå Erreur lors de la cr√©ation de la table: {e}", "ERROR")
        return False


def find_product_by_model(cursor, product_model: str) -> Optional[int]:
    """
    Chercher un produit par son nom (ou mod√®le).
    Retourne l'ID du produit si trouv√©, None sinon.
    """
    # Recherche exacte sur le nom
    cursor.execute(
        """
        SELECT id FROM products 
        WHERE LOWER(TRIM(model)) = LOWER(TRIM(%s))
        LIMIT 1
    """,
        (product_model,),
    )

    result = cursor.fetchone()
    if result:
        return result['id']

    # Recherche exacte sur le mod√®le si pas trouv√© par nom
    cursor.execute(
        """
        SELECT id FROM products 
        WHERE LOWER(TRIM(model)) = LOWER(TRIM(%s))
        LIMIT 1
    """,
        (product_model,),
    )

    result = cursor.fetchone()
    if result:
        return result['id']

    return None


def create_product(
    conn, cursor, product_model: str, logger: ImportLogger
) -> Optional[int]:
    """
    Cr√©er un nouveau produit avec le nom fourni.
    Retourne l'ID du produit cr√©√©.
    """
    try:
        cursor.execute(
            """
            INSERT INTO products (model, description)
            VALUES ( %s, %s)
            RETURNING id
        """,
            (product_model, product_model),
        )

        result = cursor.fetchone()
        product_id = result['id'] if result else None

        if product_id:
            conn.commit()  # COMMIT IMMEDIAT
            logger.log(
                f"    [DEBUG] Product INSERT committed: id={product_id}", "DEBUG"
            )

        return product_id
    except Exception as e:
        conn.rollback()
        raise Exception(f"Erreur lors de la cr√©ation du produit: {e}")


def check_link_exists(cursor, odoo_id: str = None, product_id: int = None) -> bool:
    """V√©rifier si un lien existe d√©j√† dans internal_products."""
    if odoo_id:
        cursor.execute(
            """
            SELECT id FROM internal_products WHERE odoo_id = %s
        """,
            (odoo_id,),
        )
        if cursor.fetchone():
            return True

    if product_id:
        cursor.execute(
            """
            SELECT id FROM internal_products WHERE product_id = %s
        """,
            (product_id,),
        )
        if cursor.fetchone():
            return True

    return False


def create_or_update_link(
    conn, cursor, odoo_id: str, product_id: int, logger: ImportLogger
) -> Tuple[bool, str]:
    """
    Cr√©er ou mettre √† jour le lien dans internal_products.
    Retourne (succ√®s, action) o√π action peut √™tre 'created', 'updated', ou 'exists'.
    """
    try:
        # V√©rifier si le lien existe d√©j√† par odoo_id
        cursor.execute(
            """
            SELECT id, product_id FROM internal_products WHERE odoo_id = %s
        """,
            (odoo_id,),
        )
        existing_by_odoo = cursor.fetchone()

        if existing_by_odoo:
            if existing_by_odoo['product_id'] == product_id:
                return True, 'exists'
            else:
                # Mettre √† jour le product_id
                cursor.execute(
                    """
                    UPDATE internal_products 
                    SET product_id = %s
                    WHERE odoo_id = %s
                """,
                    (product_id, odoo_id),
                )
                conn.commit()  # COMMIT IMMEDIAT
                logger.log(f"    [DEBUG] UPDATE committed: odoo_id={odoo_id}", "DEBUG")
                return True, 'updated'

        # V√©rifier si le product_id est d√©j√† li√© √† un autre odoo_id
        cursor.execute(
            """
            SELECT id, odoo_id FROM internal_products WHERE product_id = %s
        """,
            (product_id,),
        )
        existing_by_product = cursor.fetchone()

        if existing_by_product:
            # Mettre √† jour l'odoo_id
            cursor.execute(
                """
                UPDATE internal_products 
                SET odoo_id = %s
                WHERE product_id = %s
            """,
                (odoo_id, product_id),
            )
            conn.commit()  # COMMIT IMMEDIAT
            logger.log(
                f"    [DEBUG] UPDATE committed: product_id={product_id}", "DEBUG"
            )
            return True, 'updated'

        # Cr√©er le nouveau lien
        cursor.execute(
            """
            INSERT INTO internal_products (odoo_id, product_id)
            VALUES (%s, %s)
        """,
            (odoo_id, product_id),
        )
        conn.commit()  # COMMIT IMMEDIAT
        logger.log(
            f"    [DEBUG] INSERT committed: odoo_id={odoo_id} ‚Üí product_id={product_id}",
            "DEBUG",
        )

        # V√©rifier que l'insertion a bien √©t√© faite
        cursor.execute(
            "SELECT COUNT(*) FROM internal_products WHERE odoo_id = %s", (odoo_id,)
        )
        count = cursor.fetchone()[0]
        logger.log(
            f"    [DEBUG] V√©rification: {count} ligne(s) avec odoo_id={odoo_id}",
            "DEBUG",
        )

        return True, 'created'
    except Exception as e:
        conn.rollback()
        logger.log(f"    [DEBUG] ERREUR lors de create_or_update_link: {e}", "ERROR")
        raise


def verify_internal_products(conn: connection, logger: ImportLogger):
    """V√©rifier le contenu de la table internal_products apr√®s l'import."""
    try:
        with conn.cursor() as cursor:
            # Compter le total de lignes
            cursor.execute("SELECT COUNT(*) FROM internal_products")
            total = cursor.fetchone()[0]

            logger.log("\nüîç V√©rification de la table internal_products:")
            logger.log(f"   Total de lignes dans internal_products: {total}")

            if total > 0:
                # Afficher quelques exemples
                cursor.execute(
                    """
                    SELECT ip.id, ip.odoo_id, ip.product_id, p.model 
                    FROM internal_products ip
                    LEFT JOIN products p ON ip.product_id = p.id
                    ORDER BY ip.id DESC
                    LIMIT 5
                """
                )
                rows = cursor.fetchall()

                logger.log("   Derni√®res entr√©es:")
                for row in rows:
                    logger.log(
                        f"     - ID={row['id']}, odoo_id={row['odoo_id']}, "
                        f"product_id={row['product_id']}, model='{row['model']}'"
                    )
            else:
                logger.log("   ‚ö†Ô∏è  La table internal_products est VIDE !", "WARNING")
                logger.log(
                    "   ‚ö†Ô∏è  V√©rifiez les droits d'√©criture et les contraintes de la table",
                    "WARNING",
                )

            return total
    except Exception as e:
        logger.log(f"‚ùå Erreur lors de la v√©rification: {e}", "ERROR")
        return -1


def process_csv(csv_path: str, conn: connection, logger: ImportLogger):
    """Traiter le fichier CSV ligne par ligne."""

    logger.log(f"üìñ Ouverture du fichier: {csv_path}")

    try:
        with open(csv_path, 'r', encoding='utf-8') as csvfile:
            # D√©tecter automatiquement le d√©limiteur
            sample = csvfile.read(1024)
            csvfile.seek(0)

            delimiter = ';' if sample.count(';') > sample.count(',') else ','
            logger.log(f"D√©limiteur d√©tect√©: '{delimiter}'")

            reader = csv.reader(csvfile, delimiter=delimiter)

            # Ignorer l'en-t√™te
            next(reader, None)

            line_number = 1
            for row in reader:
                line_number += 1
                logger.stats['total'] += 1

                # V√©rifier qu'on a au moins 2 colonnes
                if len(row) < 2:
                    logger.log(
                        f"‚ö†Ô∏è  Ligne {line_number}: pas assez de colonnes, ignor√©e",
                        "WARNING",
                    )
                    logger.stats['errors'] += 1
                    continue

                odoo_id = row[0].strip()
                product_model = row[1].strip()

                if not odoo_id or not product_model:
                    logger.log(
                        f"‚ö†Ô∏è  Ligne {line_number}: odoo_id ou nom vide, ignor√©e",
                        "WARNING",
                    )
                    logger.stats['errors'] += 1
                    continue

                try:
                    with conn.cursor() as cursor:
                        # √âtape 1: Chercher le produit
                        product_id = find_product_by_model(cursor, product_model)

                        if product_id:
                            # Produit trouv√©
                            logger.log(
                                f"‚úì Ligne {line_number} - Produit trouv√©: '{product_model}' (ID: {product_id})"
                            )

                            # Cr√©er le lien
                            success, action = create_or_update_link(
                                conn, cursor, odoo_id, product_id, logger
                            )

                            if action == 'created':
                                logger.log(
                                    f"  ‚ûú Lien cr√©√©: odoo_id={odoo_id} ‚Üí product_id={product_id}",
                                    "SUCCESS",
                                )
                                logger.stats['found_and_linked'] += 1
                            elif action == 'updated':
                                logger.log(
                                    f"  ‚ûú Lien mis √† jour: odoo_id={odoo_id} ‚Üí product_id={product_id}",
                                    "SUCCESS",
                                )
                                logger.stats['found_and_linked'] += 1
                            else:
                                logger.log(
                                    f"  ‚ûú Lien d√©j√† existant: odoo_id={odoo_id} ‚Üí product_id={product_id}"
                                )
                                logger.stats['already_linked'] += 1

                        else:
                            # Produit non trouv√©, le cr√©er
                            logger.log(
                                f"‚ûï Ligne {line_number} - Produit non trouv√©, cr√©ation: '{product_model}'"
                            )

                            product_id = create_product(
                                conn, cursor, product_model, logger
                            )

                            if product_id:
                                logger.log(
                                    f"  ‚úì Produit cr√©√© avec ID: {product_id}", "SUCCESS"
                                )

                                # Cr√©er le lien
                                success, action = create_or_update_link(
                                    conn, cursor, odoo_id, product_id, logger
                                )

                                logger.log(
                                    f"  ‚ûú Lien cr√©√©: odoo_id={odoo_id} ‚Üí product_id={product_id}",
                                    "SUCCESS",
                                )
                                logger.stats['created_and_linked'] += 1
                            else:
                                logger.log(
                                    "  ‚ùå √âchec de la cr√©ation du produit", "ERROR"
                                )
                                logger.stats['errors'] += 1

                        # Commit apr√®s chaque ligne pour √©viter de perdre tout en cas d'erreur
                        conn.commit()

                except Exception as e:
                    conn.rollback()
                    logger.log(f"‚ùå Ligne {line_number} - Erreur: {str(e)}", "ERROR")
                    logger.stats['errors'] += 1

        logger.log("\n‚úÖ Traitement du fichier termin√©")

    except FileNotFoundError:
        logger.log(f"‚ùå Fichier non trouv√©: {csv_path}", "ERROR")
        sys.exit(1)
    except Exception as e:
        logger.log(f"‚ùå Erreur lors de la lecture du fichier: {e}", "ERROR")
        sys.exit(1)


def main():
    """Point d'entr√©e principal du script."""

    # V√©rifier les arguments
    verbose = '--verbose' in sys.argv or '-v' in sys.argv
    if verbose:
        sys.argv.remove('--verbose' if '--verbose' in sys.argv else '-v')

    logger = ImportLogger(verbose=verbose)
    logger.log("=" * 80)
    logger.log("üöÄ D√âMARRAGE DE L'IMPORT ODOO ‚Üí PRODUCTS")
    logger.log("=" * 80)
    if verbose:
        logger.log("Mode verbose activ√© - affichage des logs DEBUG", "INFO")

    # V√©rifier les arguments
    if len(sys.argv) < 2:
        logger.log(
            "‚ùå Usage: python import_odoo_products_simple.py <chemin_csv> [--verbose]",
            "ERROR",
        )
        sys.exit(1)

    csv_path = sys.argv[1]

    if not os.path.exists(csv_path):
        logger.log(f"‚ùå Le fichier n'existe pas: {csv_path}", "ERROR")
        sys.exit(1)

    # Connexion √† la base
    logger.log("üîå Connexion √† la base de donn√©es...")
    try:
        conn = get_database_connection()
        logger.log("‚úÖ Connexion √©tablie", "SUCCESS")
    except Exception as e:
        logger.log(f"‚ùå Erreur de connexion: {e}", "ERROR")
        sys.exit(1)

    try:
        # Cr√©er la table internal_products si n√©cessaire
        if not ensure_internal_products_table(conn, logger):
            logger.log("‚ùå Impossible de cr√©er la table internal_products", "ERROR")
            sys.exit(1)

        # Traiter le CSV
        process_csv(csv_path, conn, logger)

        # V√©rifier que les donn√©es sont bien dans internal_products
        verify_internal_products(conn, logger)

        # Afficher le r√©sum√©
        logger.log_summary()

    finally:
        conn.close()
        logger.log("üîå Connexion ferm√©e")


if __name__ == "__main__":
    main()
