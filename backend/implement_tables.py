#!/usr/bin/env python3
"""
Script pour impl√©menter les tables avec les donn√©es initiales
"""

import os
import sys

import psycopg2
from dotenv import load_dotenv


def main():
    print("üöÄ D√©but de l'impl√©mentation des tables...")

    # Charger les variables d'environnement
    env_path = os.path.join(os.path.dirname(__file__), ".env")
    if os.path.exists(env_path):
        load_dotenv(env_path)

    # Obtenir l'URL de la base de donn√©es
    db_url = os.getenv("DATABASE_URL")
    if not db_url:
        print("‚ùå ERROR: DATABASE_URL environment variable is not set")
        sys.exit(1)

    print("üì° Connexion √† la base de donn√©es...")

    try:
        # Connexion √† la base de donn√©es
        conn = psycopg2.connect(db_url)
        cur = conn.cursor()

        print("üóëÔ∏è  Nettoyage des tables existantes...")
        # Nettoyer les tables existantes
        cur.execute(
            """
            TRUNCATE TABLE suppliers, brands, colors, memory_options, device_types, exclusions, color_translations,graph_settings RESTART IDENTITY CASCADE;
        """
        )
        conn.commit()

        print("üë• Insertion des fournisseurs...")
        # Ins√©rer les fournisseurs
        cur.execute(
            """
            INSERT INTO suppliers (name) VALUES
            ('Yuka'),('supplier2');
        """
        )

        print("üìÑ Insertion des formats d'import...")
        # Ins√©rer les formats d'import
        cur.execute(
            """
            INSERT INTO format_imports (supplier_id, column_name, column_order) VALUES
            (1, 'description', 2),
            (1, 'model', 2),
            (1, 'quantity', 3),
            (1, 'selling_price', 4),
            (1, 'ean', 7);
        """
        )

        print("üè∑Ô∏è  Insertion des marques...")
        # Ins√©rer les marques
        cur.execute(
            """
            INSERT INTO brands(brand) VALUES 
            ('Samsung'), ('Apple'), ('Huawei'), ('Xiaomi'), ('Oppo'),
            ('Dyson'), ('Sony'), ('LG'), ('Google'), ('Microsoft'), ('Lenovo'), ('Asus'),
            ('Dell'), ('HP'), ('Acer'), ('OnePlus'), ('Realme'),('Fairphone'),('JBL'), ('Bose'),
            ('Motorola'), ('Nokia'), ('Vivo'), ('ZTE'), ('Honor'),('GoPro'), ('Canon'), ('Nikon'),
            ('TCL'), ('Alcatel'), ('BlackBerry'), ('Panasonic'), ('Fujitsu'), ('Sharp'), ('Razer'), ('Logitech'),
            ('Corsair');
        """
        )

        print("üíæ Insertion des options de m√©moire...")
        # Ins√©rer les options de m√©moire
        cur.execute(
            """
            INSERT INTO memory_options (memory, tcp_value) VALUES 
            ('32GB', 10),('64GB', 12), ('128GB', 14), ('256GB', 14), ('512GB', 14);
        """
        )

        print("üé® Insertion des couleurs...")
        # Ins√©rer les couleurs
        cur.execute(
            """
            INSERT INTO colors (color) VALUES 
            ('Blanc'), ('Noir'), ('Bleu'), ('Rouge'), ('Vert'),('Orange'),('Violet'),('Jaune'),('Rose');
        """
        )

        print("üîÑ Insertion des traductions de couleurs...")
        # Ins√©rer les traductions de couleurs
        cur.execute(
            """
            INSERT INTO color_translations (color_source, color_target, color_target_id) VALUES
            ('black', 'Noir', 2),
            ('dark grey', 'Noir', 2),
            ('dark gray', 'Noir', 2),
            ('white', 'Blanc', 1),
            ('starlight', 'Blanc', 1),
            ('blue', 'Bleu', 3),
            ('blau', 'Bleu', 3),
            ('midnight', 'Bleu', 3),
            ('ultramarine', 'Bleu', 3),
            ('red', 'Rouge', 4),
            ('pink', 'Rose', 9),
            ('green', 'Vert', 5),
            ('orange', 'Orange', 6),
            ('purple', 'Violet', 7),
            ('gold', 'Blanc', 1),
            ('silver', 'Blanc', 1),
            ('grey', 'Noir', 2),
            ('gray', 'Noir', 2),
            ('champagne', 'Blanc', 1),
            ('rose', 'Rose', 9),
            ('yellow', 'Jaune', 8);
        """
        )

        print("üì± Insertion des types d'appareils...")
        # Ins√©rer les types d'appareils
        cur.execute(
            """
            INSERT INTO device_types (type) VALUES 
            ('T√©l√©phone'), ('Tablette'), ('Montre'), ('Ordinateur'), ('Accessoire'),('Ecouteur'),('Chargeur'),('C√¢ble'),('A d√©finir');
        """
        )

        print("üö´ Insertion des exclusions...")
        # Ins√©rer les exclusions
        cur.execute(
            """
            INSERT INTO exclusions (term) VALUES 
            ('Mac'), ('Backbone'), ('Bulk'), ('OH25B'), ('Soundbar');
        """
        )

        print("üìä Insertion des param√®tres de graphique...")
        # Ins√©rer les param√®tres de graphique
        cur.execute(
            """
            INSERT INTO graph_settings (name, visible) VALUES 
            ('global', True),('product', False),('relative', False),('distribution', False),
            ('stdev', False),('range', False),('index', False),('correlation', False),('anomalies', False);
        """
        )

        print("üì±Ajout produits")
        cur.execute(
            """
            INSERT INTO products (model,description, brand_id, color_id, memory_id, type_id) VALUES
            ('Apple 20W USB-C Adapter - White', 'Apple 20W USB-C Adapter - White', 2, 1, null,null);
        """
        )

        # Valider toutes les transactions
        conn.commit()

        # Afficher un r√©sum√©
        print("\nüìà R√©sum√© des donn√©es ins√©r√©es:")
        tables = [
            ('suppliers', 'Fournisseurs'),
            ('brands', 'Marques'),
            ('colors', 'Couleurs'),
            ('memory_options', 'Options m√©moire'),
            ('device_types', 'Types d\'appareils'),
            ('exclusions', 'Exclusions'),
            ('color_translations', 'Traductions couleurs'),
            ('graph_settings', 'Param√®tres graphiques'),
            ('products', 'Produits'),
        ]

        for table, description in tables:
            cur.execute(f"SELECT COUNT(*) FROM {table}")
            count = cur.fetchone()[0]
            print(f"  ‚úÖ {description}: {count} entr√©es")

        print("\nüéâ Impl√©mentation des tables termin√©e avec succ√®s!")

    except psycopg2.Error as e:
        print(f"‚ùå Erreur de base de donn√©es: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        sys.exit(1)
    finally:
        # Fermer les connexions
        if 'cur' in locals():
            cur.close()
        if 'conn' in locals():
            conn.close()


if __name__ == "__main__":
    main()
