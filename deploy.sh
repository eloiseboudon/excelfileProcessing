#!/bin/bash

# Script de d√©ploiement automatis√© AJT Pro
# Usage: ./deploy.sh [branch_name]

set -e  # Arr√™t du script en cas d'erreur

# Configuration
REPO_URL="https://github.com/votre-username/ajtpro.git"  # √Ä adapter
APP_DIR="/home/ubuntu/ajtpro"  # R√©pertoire actuel de l'application
BRANCH="${1:-main}"  # Branche par d√©faut ou celle pass√©e en param√®tre
DOCKER_COMPOSE_FILE="docker-compose.yml"
DOCKER_COMPOSE_PROD_FILE="docker-compose.prod.yml"
BACKUP_DIR="/home/ubuntu/backups_ajtpro/deployments/$(date +%Y%m%d_%H%M%S)"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

info() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log "üîç V√©rification des pr√©requis..."
    
    if ! command -v git &> /dev/null; then
        error "Git n'est pas install√©"
    fi
    
    if ! command -v docker &> /dev/null; then
        error "Docker n'est pas install√©"
    fi
    
    if ! command -v docker-compose &> /dev/null && ! command -v docker compose &> /dev/null; then
        error "Docker Compose n'est pas install√©"
    fi
    
    info "‚úÖ Tous les pr√©requis sont satisfaits"
}

# Cr√©ation/v√©rification du r√©seau Docker
setup_docker_network() {
    log "üåê Configuration du r√©seau Docker..."
    
    # V√©rifier si le r√©seau existe d√©j√†  
    if docker network ls --format "table {{.Name}}" | grep -q "^ajtpro_default$"; then
        info "‚úÖ Le r√©seau ajtpro_default existe d√©j√†"
    else
        log "üì° Cr√©ation du r√©seau Docker ajtpro_default..."
        docker network create ajtpro_default
        info "‚úÖ R√©seau ajtpro_default cr√©√© avec succ√®s"
    fi
}

# Sauvegarde de la base de donn√©es avant d√©ploiement
backup_database() {
    log "üíæ Sauvegarde de la base de donn√©es avant d√©ploiement..."
    
    if [ -f "./save_db.sh" ]; then
        # S'assurer que le script est ex√©cutable
        chmod +x ./save_db.sh
        ./save_db.sh "before_deploy_$(date +%Y%m%d_%H%M%S)" || warn "√âchec de la sauvegarde DB (non critique)"
    else
        warn "Script save_db.sh introuvable, pas de sauvegarde DB"
    fi
}

# Sauvegarde de l'application actuelle
backup_current_version() {
    log "üì¶ Sauvegarde de la version actuelle..."
    
    if [ -d "$APP_DIR" ]; then
        mkdir -p "$BACKUP_DIR"
        # Sauvegarde uniquement les fichiers essentiels (pas node_modules, dist, etc.)
        tar --exclude='*/node_modules' \
            --exclude='*/dist' \
            --exclude='*/build' \
            --exclude='*/.git' \
            --exclude='*/coverage' \
            -czf "$BACKUP_DIR/app_backup.tar.gz" \
            -C "$(dirname "$APP_DIR")" "$(basename "$APP_DIR")"
        
        info "Sauvegarde cr√©√©e : $BACKUP_DIR/app_backup.tar.gz"
    fi
}

# R√©cup√©ration du code depuis Git
fetch_code() {
    log "üì• R√©cup√©ration du code depuis Git (branche: $BRANCH)..."
    
    cd "$APP_DIR"
    
    # V√©rification du statut Git
    if ! git status &>/dev/null; then
        error "Le r√©pertoire n'est pas un repository Git valide"
    fi
    
    # Sauvegarde des changements locaux potentiels
    if ! git diff --quiet; then
        warn "Des changements locaux d√©tect√©s, cr√©ation d'un stash..."
        git stash push -m "Auto-stash before deploy $(date)"
    fi
    
    # Mise √† jour du code
    git fetch origin
    git checkout "$BRANCH"
    git pull origin "$BRANCH"
    
    local commit_hash=$(git rev-parse --short HEAD)
    local commit_msg=$(git log -1 --pretty=%B | head -1)
    
    info "‚úÖ Code mis √† jour - Commit: $commit_hash"
    info "üìù Message: $commit_msg"
}

# Build du frontend avec gestion des erreurs et r√©cup√©ration
build_frontend() {
    log "üóÉÔ∏è Build du frontend..."
    
    cd "$APP_DIR/frontend"
    
    # V√©rification de package.json
    if [ ! -f "package.json" ]; then
        error "package.json introuvable dans le r√©pertoire frontend"
    fi
    
    # Installation des d√©pendances avec gestion d'erreur
    log "üì¶ Installation des d√©pendances NPM..."
    if ! npm ci --production=false; then
        warn "‚ö†Ô∏è npm ci a √©chou√©, tentative de correction..."
        
        # Correction du probl√®me Rollup/npm
        log "üîß Correction du probl√®me de d√©pendances..."
        rm -rf node_modules package-lock.json
        npm cache clean --force
        
        if npm install --legacy-peer-deps; then
            info "‚úÖ D√©pendances install√©es avec --legacy-peer-deps"
        elif npm install --force; then
            info "‚úÖ D√©pendances install√©es avec --force"
        else
            error "‚ùå Impossible d'installer les d√©pendances"
        fi
    fi
    
    # Build de production avec r√©cup√©ration
    log "üî® Build de production..."
    if ! npm run build; then
        warn "‚ö†Ô∏è Premier build √©chou√©, tentative de correction..."
        
        # R√©installer Rollup sp√©cifiquement
        npm install rollup@latest --save-dev --legacy-peer-deps || true
        
        # Retry le build
        if npm run build; then
            info "‚úÖ Build r√©ussi apr√®s correction"
        else
            error "‚ùå Build d√©finitivement √©chou√©"
        fi
    fi
    
    # V√©rification que le build a r√©ussi
    if [ ! -d "dist" ] && [ ! -d "build" ]; then
        error "Le r√©pertoire de build (dist/build) n'existe pas apr√®s le build"
    fi
    
    local build_size=$(du -sh dist 2>/dev/null || du -sh build 2>/dev/null || echo "N/A")
    info "‚úÖ Frontend build√© avec succ√®s - Taille: $build_size"
    
    cd "$APP_DIR"
}

# Gestion des containers Docker avec validation
manage_docker_containers() {
    log "üê≥ Gestion des containers Docker..."
    
    cd "$APP_DIR"
    
    # D√©terminer la commande docker-compose
    DOCKER_COMPOSE_CMD="docker compose"

    # Choisir le bon fichier docker-compose
    local compose_file="$DOCKER_COMPOSE_FILE"
    if [ -f "$DOCKER_COMPOSE_PROD_FILE" ]; then
        read -p "Utiliser le fichier de production ? (y/N): " use_prod
        if [[ $use_prod =~ ^[Yy]$ ]]; then
            compose_file="$DOCKER_COMPOSE_PROD_FILE"
            info "Utilisation du fichier de production: $compose_file"
        fi
    fi
    
    # Arr√™t propre des containers existants
    log "‚èπÔ∏è Arr√™t des containers..."
    $DOCKER_COMPOSE_CMD -f "$compose_file" down --remove-orphans || warn "Erreur lors de l'arr√™t (non critique)"
    
    # Nettoyage des images non utilis√©es (optionnel)
    log "üßπ Nettoyage des images Docker..."
    docker system prune -f --volumes || warn "Erreur lors du nettoyage (non critique)"
    
    # Reconstruction des images
    log "üîÑ Reconstruction des images..."
    $DOCKER_COMPOSE_CMD -f "$compose_file" build --no-cache
    
    # D√©marrage des containers
    log "üöÄ D√©marrage des containers..."
    $DOCKER_COMPOSE_CMD -f "$compose_file" up -d
    
    # Attendre que les services soient pr√™ts
    log "‚è≥ Attente que les services soient pr√™ts..."
    sleep 10
    
    # Stockage de la commande docker-compose pour les migrations
    export DOCKER_COMPOSE_CMD="$DOCKER_COMPOSE_CMD"
    export COMPOSE_FILE="$compose_file"
    
    # Affichage du statut
    log "üìä Statut des containers:"
    $DOCKER_COMPOSE_CMD -f "$compose_file" ps
}

# Fonction am√©lior√©e pour d√©tecter si des migrations sont vraiment n√©cessaires
check_migration_needed() {
    log "üîç V√©rification si des migrations sont r√©ellement n√©cessaires..."
    
    # V√©rifier l'√©tat actuel
    local current_migration=$($DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend alembic current 2>/dev/null | grep -E "^[a-f0-9]+" || echo "")
    
    # V√©rifier s'il y a des migrations en attente
    local pending_migrations=$($DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend alembic show head 2>/dev/null | grep -E "^[a-f0-9]+" || echo "")
    
    if [ "$current_migration" = "$pending_migrations" ]; then
        info "‚úÖ Base de donn√©es d√©j√† √† jour (version: $current_migration)"
        
        # Test suppl√©mentaire : g√©n√©rer une migration dry-run pour voir s'il y a vraiment des changements
        local dry_run_output=$($DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend alembic revision --autogenerate --dry-run 2>/dev/null || echo "")
        
        if echo "$dry_run_output" | grep -q "No changes in schema detected"; then
            info "‚úÖ Aucun changement de sch√©ma d√©tect√©"
            return 1  # Pas de migration n√©cessaire
        fi
    fi
    
    return 0  # Migration n√©cessaire
}

# Fonction de confirmation am√©lior√©e
ask_migration_confirmation() {
    # D'abord v√©rifier si une migration est vraiment n√©cessaire
    if ! check_migration_needed; then
        log "üéØ Base de donn√©es d√©j√† √† jour - aucune migration n√©cessaire"
        echo ""
        echo "Options disponibles :"
        echo "  1. Forcer une v√©rification des migrations (non recommand√©)"
        echo "  2. Continuer sans migration (recommand√©)"
        echo "  3. Annuler le d√©ploiement"
        echo ""
        
        while true; do
            read -p "Votre choix (1/2/3) [2] : " migration_choice
            migration_choice=${migration_choice:-2}
            
            case $migration_choice in
                1)
                    warn "‚ö†Ô∏è For√ßage de la v√©rification des migrations"
                    return 0
                    ;;
                2)
                    log "‚úÖ Poursuite sans migration - base d√©j√† √† jour"
                    return 1
                    ;;
                3)
                    log "‚ùå D√©ploiement annul√© par l'utilisateur"
                    exit 0
                    ;;
                *)
                    error "Choix invalide. Veuillez saisir 1, 2 ou 3"
                    ;;
            esac
        done
    fi
    
    # Si on arrive ici, des migrations sont probablement n√©cessaires
    log "ü§î Confirmation pour les migrations de base de donn√©es"
    # ... rest of your existing function
}

# Gestion des migrations Alembic - VERSION AM√âLIOR√âE
run_database_migrations() {
    log "üóÉÔ∏è Gestion des migrations de base de donn√©es avec Alembic..."
    
    cd "$APP_DIR"
    
    # Diagnostic initial des containers
    log "üìä V√©rification de l'√©tat des containers..."
    $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" ps
    
    # V√©rification que les containers essentiels sont en cours d'ex√©cution
    if ! $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" ps | grep -E "(backend|postgres)" | grep -q "Up"; then
        warn "‚ö†Ô∏è Les containers backend ou postgres ne semblent pas tous d√©marr√©s"
        log "üìã Statut d√©taill√©:"
        $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" ps
        
        # Tentative de red√©marrage des containers probl√©matiques
        log "üîÑ Tentative de red√©marrage des containers..."
        $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" restart postgres backend || true
        sleep 15
    fi
    
    # Attendre que la base de donn√©es soit pr√™te avec diagnostics am√©lior√©s
    log "‚è≥ Attente que la base de donn√©es soit pr√™te..."
    local max_attempts=15  # R√©duit √† 15 mais avec de meilleurs tests
    local attempt=1
    local db_ready=false
    
    while [ $attempt -le $max_attempts ]; do
        # Test 1: V√©rifier que le container postgres existe et fonctionne
        if ! $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" ps postgres | grep -q "Up"; then
            warn "Container postgres pas en √©tat 'Up' - tentative $attempt/$max_attempts"
            if [ $attempt -le 3 ]; then
                log "üîÑ Red√©marrage du container postgres..."
                $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" restart postgres || true
                sleep 10
            fi
        else
            # Test 2: pg_isready depuis le container postgres
            if $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T postgres pg_isready -h localhost -p 5432 >/dev/null 2>&1; then
                info "‚úÖ PostgreSQL r√©pond √† pg_isready"
                
                # Test 3: Connexion r√©elle avec psql
                if $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T postgres psql -h localhost -U "${POSTGRES_USER:-ajt_user}" -d "${POSTGRES_DB:-ajt_db}" -c "SELECT 1;" >/dev/null 2>&1; then
                    info "‚úÖ Base de donn√©es accessible et fonctionnelle"
                    db_ready=true
                    break
                else
                    warn "PostgreSQL r√©pond mais la DB sp√©cifique n'est pas accessible"
                fi
            fi
        fi
        
        if [ $attempt -eq $max_attempts ]; then
            # Diagnostic complet en cas d'√©chec
            warn "üîç Diagnostic approfondi de la base de donn√©es..."
            
            log "üìä Statut final des containers:"
            $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" ps
            
            log "üê≥ Inspection du container postgres:"
            docker inspect $(docker ps -q --filter "name=postgres") 2>/dev/null | grep -E "(State|Health)" || true
            
            log "üåê Ports expos√©s:"
            docker port $(docker ps -q --filter "name=postgres") 2>/dev/null || true
            
            log "üìã Logs PostgreSQL (derni√®res 20 lignes):"
            $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" logs --tail=20 postgres || true
            
            log "üìã Logs Backend (derni√®res 15 lignes):"
            $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" logs --tail=15 backend || true
            
            log "üîß Variables d'environnement postgres:"
            $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T postgres env | grep -E "(POSTGRES_|DB_)" 2>/dev/null || true
            
            # Proposer des options √† l'utilisateur au lieu d'un arr√™t brutal
            echo ""
            warn "‚ùå La base de donn√©es n'est pas accessible apr√®s $max_attempts tentatives"
            echo ""
            echo "Options disponibles :"
            echo "  1. Continuer sans migrations (risqu√©)"
            echo "  2. Red√©marrer les containers et r√©essayer"
            echo "  3. Arr√™ter le d√©ploiement"
            echo ""
            
            while true; do
                read -p "Votre choix (1/2/3) [3] : " db_choice
                db_choice=${db_choice:-3}
                
                case $db_choice in
                    1)
                        warn "‚ö†Ô∏è Poursuite sans migrations - ATTENTION aux incompatibilit√©s!"
                        return 1  # Indique qu'on skip les migrations
                        ;;
                    2)
                        log "üîÑ Red√©marrage complet des containers..."
                        $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" down
                        sleep 5
                        $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" up -d
                        sleep 20
                        # Relancer cette fonction r√©cursivement
                        run_database_migrations
                        return $?
                        ;;
                    3)
                        error "‚ùå D√©ploiement arr√™t√© sur demande utilisateur"
                        ;;
                    *)
                        warn "Choix invalide. Veuillez saisir 1, 2 ou 3"
                        ;;
                esac
            done
        fi
        
        warn "Tentative $attempt/$max_attempts - Base de donn√©es pas encore pr√™te..."
        sleep 8  # Attente un peu plus longue
        ((attempt++))
    done
    
    if [ "$db_ready" = false ]; then
        return 1  # La DB n'est pas pr√™te mais on peut continuer
    fi
    
    # === PHASE DE MIGRATION PROPREMENT DITE ===
    log "üöÄ D√©but des op√©rations de migration..."
    
    # 1. V√©rifier l'√©tat actuel des migrations AVANT de faire quoi que ce soit
    log "üìã V√©rification de l'√©tat actuel des migrations..."
    local current_migration=""
    local alembic_initialized=false
    
    if $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend alembic current >/dev/null 2>&1; then
        current_migration=$($DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend alembic current 2>/dev/null | grep -E "^[a-f0-9]+" || echo "Aucune")
        info "Migration actuelle: $current_migration"
        alembic_initialized=true
    else
        warn "Alembic pas encore initialis√© ou erreur de connexion"
        # V√©rifier s'il faut initialiser Alembic
        if ! $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend test -f /app/alembic.ini >/dev/null 2>&1; then
            warn "Fichier alembic.ini introuvable - Alembic non configur√©"
            return 1
        fi
    fi
    
    # 2. Lister les migrations existantes
    log "üìú Liste des fichiers de migration existants:"
    local existing_migrations=$($DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend find /app/alembic/versions -name "*.py" -type f 2>/dev/null | wc -l || echo "0")
    info "Nombre de fichiers de migration: $existing_migrations"
    
    if [ "$existing_migrations" -gt 0 ]; then
        log "üìÑ Fichiers de migration pr√©sents:"
        $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend ls -la /app/alembic/versions/ 2>/dev/null || true
    fi
    
    # 3. G√©n√©ration automatique d'une migration si des changements sont d√©tect√©s
    log "üîç V√©rification des changements de sch√©ma..."
    local migration_name="auto_migrate_$(date +%Y%m%d_%H%M%S)"
    local new_migration_created=false
    
    # Capture de la sortie pour v√©rifier s'il y a vraiment des changements
    local autogenerate_output
    if autogenerate_output=$($DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend alembic revision --autogenerate -m "$migration_name" 2>&1); then
        info "‚úÖ Commande de g√©n√©ration de migration ex√©cut√©e"
        
        # V√©rifier si une nouvelle migration a vraiment √©t√© cr√©√©e
        local new_migrations=$($DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend find /app/alembic/versions -name "*.py" -type f 2>/dev/null | wc -l || echo "0")
        
        if [ "$new_migrations" -gt "$existing_migrations" ]; then
            log "üÜï Nouvelle migration g√©n√©r√©e!"
            new_migration_created=true
            
            # Afficher la nouvelle migration cr√©√©e
            log "üìÑ Nouvelle migration cr√©√©e:"
            $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend ls -la /app/alembic/versions/ | tail -1 || true
            
            # Afficher le contenu de la nouvelle migration pour v√©rification
            log "üìù Contenu de la nouvelle migration (50 premi√®res lignes):"
            local newest_migration=$($DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend find /app/alembic/versions -name "*.py" -type f -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | cut -d' ' -f2 || "")
            if [ -n "$newest_migration" ]; then
                echo "----------------------------------------"
                $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend cat "$newest_migration" 2>/dev/null | head -50 || true
                echo "----------------------------------------"
            fi
        else
            # V√©rifier dans la sortie s'il n'y avait vraiment aucun changement
            if echo "$autogenerate_output" | grep -qi "no changes\|no change detected"; then
                info "‚ÑπÔ∏è Aucun changement de sch√©ma d√©tect√© - pas de nouvelle migration n√©cessaire"
            else
                warn "‚ö†Ô∏è Migration g√©n√©r√©e mais fichier non trouv√© - v√©rifiez la sortie:"
                echo "$autogenerate_output"
            fi
        fi
    else
        warn "‚ö†Ô∏è Erreur lors de la g√©n√©ration de migration:"
        echo "$autogenerate_output"
    fi
    
    # 4. Application des migrations en attente (m√™me s'il n'y en a pas de nouvelles)
    log "‚¨ÜÔ∏è Application des migrations en attente..."
    if $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend alembic upgrade head 2>&1; then
        info "‚úÖ Migrations appliqu√©es avec succ√®s"
        
        # V√©rifier l'√©tat apr√®s application
        local new_current_migration=""
        if $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend alembic current >/dev/null 2>&1; then
            new_current_migration=$($DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend alembic current 2>/dev/null | grep -E "^[a-f0-9]+" || echo "Aucune")
            info "Migration actuelle apr√®s upgrade: $new_current_migration"
            
            if [ "$current_migration" != "$new_current_migration" ]; then
                info "üîÑ Migration mise √† jour de '$current_migration' vers '$new_current_migration'"
            else
                info "üìå Aucune nouvelle migration appliqu√©e (d√©j√† √† jour)"
            fi
        fi
        
    else
        error "‚ùå √âchec de l'application des migrations"
    fi
    
    # 5. V√©rification que les champs sont maintenant pr√©sents dans la table users (optionnel)
    log "üîç V√©rification de la structure de la table users..."
    if $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T postgres psql -U "${POSTGRES_USER:-ajt_user}" -d "${POSTGRES_DB:-ajt_db}" -c "\d users" >/dev/null 2>&1; then
        info "üìã Structure actuelle de la table users:"
        echo "----------------------------------------"
        $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T postgres psql -U "${POSTGRES_USER:-ajt_user}" -d "${POSTGRES_DB:-ajt_db}" -c "\d users" 2>/dev/null || true
        echo "----------------------------------------"
    else
        warn "‚ö†Ô∏è Impossible d'afficher la structure de la table users (table n'existe peut-√™tre pas encore)"
    fi
    
    # 6. Affichage de l'historique des migrations
    log "üìú Historique des migrations:"
    if $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend alembic history --indicate-current >/dev/null 2>&1; then
        echo "----------------------------------------"
        $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend alembic history --indicate-current 2>/dev/null | head -20 || true
        echo "----------------------------------------"
    else
        # Alternative si la commande pr√©c√©dente √©choue
        log "üìú Liste des migrations disponibles:"
        $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend find /app/alembic/versions -name "*.py" -type f | head -10 2>/dev/null || warn "Impossible d'afficher les migrations"
    fi
    
    log "‚úÖ Gestion des migrations Alembic termin√©e avec succ√®s"
    return 0
}

# V√©rification de la sant√© de l'application
health_check() {
    log "üè• V√©rification de la sant√© de l'application..."
    
    # URLs √† tester (adaptez selon votre configuration)
    local frontend_url="http://localhost:3000"
    local backend_url="http://localhost:8000"
    
    # Test du frontend
    log "üåê Test du frontend..."
    for i in {1..10}; do
        if curl -f -s "$frontend_url" > /dev/null; then
            info "‚úÖ Frontend accessible !"
            break
        fi
        if [ $i -eq 10 ]; then
            error "‚ùå Frontend inaccessible apr√®s 10 tentatives"
        fi
        warn "Tentative $i/10 - Frontend en cours de d√©marrage..."
        sleep 10
    done
    
    # Test du backend
    log "üîß Test du backend..."
    for i in {1..10}; do
        if curl -f -s "$backend_url/health" > /dev/null 2>&1 || curl -f -s "$backend_url" > /dev/null 2>&1; then
            info "‚úÖ Backend accessible !"
            break
        fi
        if [ $i -eq 10 ]; then
            warn "‚ö†Ô∏è Backend inaccessible (v√©rifiez manuellement)"
            break
        fi
        warn "Tentative $i/10 - Backend en cours de d√©marrage..."
        sleep 10
    done
    
    # V√©rification de la base de donn√©es
    log "üóÑÔ∏è Test de la base de donn√©es..."
    if docker exec postgres_prod pg_isready -U ajt_user -d ajt_db > /dev/null 2>&1; then
        info "‚úÖ Base de donn√©es accessible !"
    else
        warn "‚ö†Ô∏è Base de donn√©es inaccessible (v√©rifiez manuellement)"
    fi
}

# Rollback en cas d'√©chec
rollback() {
    error "üí• √âchec du d√©ploiement, rollback en cours..."
    
    if [ -f "$BACKUP_DIR/app_backup.tar.gz" ]; then
        log "üîÑ Restauration de la version pr√©c√©dente..."
        
        cd "$(dirname "$APP_DIR")"
        rm -rf "$APP_DIR"
        tar -xzf "$BACKUP_DIR/app_backup.tar.gz"
        
        cd "$APP_DIR"
        manage_docker_containers
        
        warn "‚ö†Ô∏è Rollback termin√© - V√©rifiez l'√©tat de l'application"
        warn "‚ö†Ô∏è ATTENTION: Les migrations de base de donn√©es ne peuvent pas √™tre annul√©es automatiquement"
        warn "‚ö†Ô∏è Vous devrez peut-√™tre restaurer manuellement la base de donn√©es depuis une sauvegarde"
    else
        error "‚ùå Impossible de faire le rollback - Pas de sauvegarde disponible"
    fi
}

# Nettoyage des anciennes sauvegardes
cleanup_old_backups() {
    log "üßπ Nettoyage des anciennes sauvegardes de d√©ploiement..."
    
    local backup_base_dir="/home/ubuntu/backups_ajtpro/deployments"
    if [ -d "$backup_base_dir" ]; then
        find "$backup_base_dir" -maxdepth 1 -type d -name "20*" | sort -r | tail -n +6 | xargs rm -rf 2>/dev/null || true
        info "‚úÖ Nettoyage termin√© (conservation des 5 derni√®res)"
    fi
}

# Affichage des informations post-d√©ploiement
show_deployment_info() {
    log "üìã Informations de d√©ploiement:"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "üåê Frontend: http://$(hostname -I | awk '{print $1}'):3000"
    echo "üîß Backend:  http://$(hostname -I | awk '{print $1}'):8000"
    echo "üóÑÔ∏è Database: PostgreSQL sur le port 5432"
    echo "üìù Logs: docker compose logs -f [service_name]"
    echo "üìä Statut: docker compose ps"
    echo "üóÉÔ∏è Migrations: docker compose exec backend alembic current"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    
    # Informations Git
    cd "$APP_DIR"
    local commit_hash=$(git rev-parse --short HEAD)
    local branch=$(git branch --show-current)
    local commit_date=$(git log -1 --format=%cd --date=short)
    
    echo "üìù Version d√©ploy√©e:"
    echo "   Branche: $branch"
    echo "   Commit:  $commit_hash"
    echo "   Date:    $commit_date"
    
    # Informations sur les migrations
    log "üóÉÔ∏è √âtat des migrations:"
    if [ -n "${DOCKER_COMPOSE_CMD:-}" ] && [ -n "${COMPOSE_FILE:-}" ]; then
        local migration_info=$($DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend alembic current 2>/dev/null || echo "Informations non disponibles")
        echo "   $migration_info"
        
        # Afficher le nombre total de migrations
        local total_migrations=$($DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend find /app/alembic/versions -name "*.py" -type f | wc -l 2>/dev/null || echo "0")
        echo "   Nombre total de fichiers de migration: $total_migrations"
    fi
    
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
}

# Demande de confirmation pour les migrations
ask_migration_confirmation() {
    log "ü§î Confirmation pour les migrations de base de donn√©es"
    echo ""
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                  ‚ö†Ô∏è  ATTENTION  ‚ö†Ô∏è                    ‚ïë"
    echo "‚ïë                                                       ‚ïë"
    echo "‚ïë  Le script va maintenant proc√©der aux migrations     ‚ïë"
    echo "‚ïë  de base de donn√©es avec Alembic :                   ‚ïë"
    echo "‚ïë                                                       ‚ïë"
    echo "‚ïë  1. G√©n√©ration automatique de nouvelles migrations   ‚ïë"
    echo "‚ïë  2. Application de toutes les migrations en attente  ‚ïë"
    echo "‚ïë  3. Modification du sch√©ma de la base de donn√©es     ‚ïë"
    echo "‚ïë                                                       ‚ïë"
    echo "‚ïë  ‚ö†Ô∏è  Ces changements sont IRR√âVERSIBLES  ‚ö†Ô∏è           ‚ïë"
    echo "‚ïë                                                       ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo ""
    
    # Afficher l'√©tat actuel si possible
    if [ -n "${DOCKER_COMPOSE_CMD:-}" ] && [ -n "${COMPOSE_FILE:-}" ]; then
        log "üìã √âtat actuel de la base de donn√©es :"
        
        # V√©rifier si les containers sont d√©marr√©s
        if $DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" ps backend | grep -q "Up" 2>/dev/null; then
            # Afficher la migration actuelle
            local current_migration=$($DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend alembic current 2>/dev/null | head -1 || echo "Informations non disponibles")
            echo "   Migration actuelle : $current_migration"
            
            # Compter les migrations existantes
            local migration_count=$($DOCKER_COMPOSE_CMD -f "$COMPOSE_FILE" exec -T backend find /app/alembic/versions -name "*.py" -type f 2>/dev/null | wc -l || echo "0")
            echo "   Nombre de migrations : $migration_count"
        else
            warn "Containers pas encore d√©marr√©s - impossible d'afficher l'√©tat actuel"
        fi
    fi
    
    echo ""
    warn "üîÑ Une sauvegarde de la base de donn√©es a √©t√© effectu√©e avant le d√©ploiement"
    
    # Options disponibles
    echo ""
    echo "Options disponibles :"
    echo "  1. Continuer avec les migrations automatiques (recommand√©)"
    echo "  2. Ignorer les migrations (d√©ploiement sans migration DB)"
    echo "  3. Annuler le d√©ploiement"
    echo ""
    
    while true; do
        read -p "Votre choix (1/2/3) [1] : " migration_choice
        
        # Valeur par d√©faut
        migration_choice=${migration_choice:-1}
        
        case $migration_choice in
            1)
                log "‚úÖ Poursuite avec les migrations automatiques"
                return 0
                ;;
            2)
                warn "‚ö†Ô∏è Migrations ignor√©es - Le d√©ploiement continue sans migration DB"
                warn "‚ö†Ô∏è ATTENTION : Votre application pourrait ne pas fonctionner si le sch√©ma DB a chang√©"
                return 1
                ;;
            3)
                log "‚ùå D√©ploiement annul√© par l'utilisateur"
                exit 0
                ;;
            *)
                error "Choix invalide. Veuillez saisir 1, 2 ou 3"
                ;;
        esac
    done
}

# Fonction principale
main() {
    log "üöÄ D√©but du d√©ploiement automatis√© AJT Pro"
    
    # Trap pour g√©rer les erreurs et faire un rollback
    trap rollback ERR
    
    check_prerequisites
    setup_docker_network
    backup_database
    backup_current_version
    fetch_code
    build_frontend
    manage_docker_containers
    
    # Demander confirmation avant les migrations
    if ask_migration_confirmation; then
        if run_database_migrations; then
            info "‚úÖ Migrations de base de donn√©es termin√©es avec succ√®s"
        else
            warn "‚ö†Ô∏è Migrations ignor√©es ou √©chou√©es - Le d√©ploiement continue"
            warn "üîç V√©rifiez manuellement que votre application fonctionne correctement"
        fi
    else
        warn "üö´ Migrations de base de donn√©es ignor√©es"
        warn "üîç V√©rifiez manuellement que votre application fonctionne correctement"
    fi
    
    health_check
    cleanup_old_backups
    show_deployment_info
    
    log "üéâ D√©ploiement termin√© avec succ√®s !"
    info "‚è∞ Dur√©e totale: $SECONDS secondes"
}

# Gestion des arguments
case "${1:-}" in
    -h|--help)
        echo "Usage: $0 [branche] [options]"
        echo ""
        echo "Options:"
        echo "  -h, --help    Affiche cette aide"
        echo "  --no-backup   Skip la sauvegarde de la DB"
        echo "  --force       Force le d√©ploiement sans confirmation"
        echo ""
        echo "Exemples:"
        echo "  $0                # D√©ploie la branche main"
        echo "  $0 develop        # D√©ploie la branche develop"
        echo "  $0 feature/new    # D√©ploie une branche sp√©cifique"
        echo ""
        echo "Le script inclut maintenant la gestion automatique des migrations Alembic:"
        echo "  - Demande de confirmation avant les migrations"
        echo "  - G√©n√©ration automatique de migrations si n√©cessaire"
        echo "  - Application des migrations en attente"
        echo "  - V√©rification de l'√©tat des migrations"
        echo "  - Affichage de la structure des tables"
        echo "  - V√©rification robuste de la base de donn√©es"
        echo "  - Possibilit√© d'ignorer les migrations"
        exit 0
        ;;
    --version)
        echo "AJT Pro Deploy Script v2.3 (avec support Alembic am√©lior√© et confirmation utilisateur)"
        exit 0
        ;;
    *)
        # Confirmation avant d√©ploiement en production
        if [ "${1:-main}" = "main" ] || [ "${1:-main}" = "master" ]; then
            echo ""
            warn "‚ö†Ô∏è Vous √™tes sur le point de d√©ployer en PRODUCTION"
            warn "‚ö†Ô∏è Les migrations de base de donn√©es seront appliqu√©es automatiquement"
            read -p "√ätes-vous s√ªr de vouloir continuer? (oui/non): " confirmation
            if [ "$confirmation" != "oui" ]; then
                log "D√©ploiement annul√© par l'utilisateur"
                exit 0
            fi
        fi
        
        main "$@"
        ;;
esac