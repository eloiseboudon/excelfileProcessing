services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ajtpro
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  backend:
    build:
      context: ./
      dockerfile: ./backend/Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ajtpro
      FLASK_ENV: development
      FLASK_APP: app.py
      FLASK_DEBUG: 1
      PYTHONPATH: /app
      FRONTEND_URL: http://localhost:5173,http://localhost:3000
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173,http://frontend:80,http://frontend-dev:5173"
    volumes:
      - ./backend:/app
    container_name: ajt_backend
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
    working_dir: /app
    networks:
      - app-network
    restart: unless-stopped
    command: python -m flask run --host=0.0.0.0 --port=5001 --reload

  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    container_name: ajt_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - VITE_API_BASE=http://localhost:5001

  # Service optionnel pour le d√©veloppement
  frontend-dev:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile.dev
    container_name: ajt_frontend_dev
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - app-network
    environment:
      - VITE_API_BASE=http://localhost:5001
    profiles:
      - dev

volumes:
  postgres_data:


networks:
  app-network:
    driver: bridge
