#!/bin/bash

# Script de d√©ploiement d'urgence AJT Pro
# Usage: ./emergency-deploy.sh
# Ce script contourne les probl√®mes Git et de sauvegarde

set -e

# Configuration
APP_DIR="/home/ubuntu/ajtpro"
DOCKER_COMPOSE_FILE="docker-compose.yml"
DOCKER_COMPOSE_PROD_FILE="docker-compose.prod.yml"

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date '+%H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date '+%H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date '+%H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

info() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')] INFO: $1${NC}"
}

echo "üö® D√âPLOIEMENT D'URGENCE AJT PRO"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
warn "‚ö†Ô∏è  Ce script contourne les v√©rifications Git et de sauvegarde"
warn "‚ö†Ô∏è  Utilisez uniquement en cas d'urgence"
echo ""

read -p "Continuer avec le d√©ploiement d'urgence? (oui/non): " confirm
if [ "$confirm" != "oui" ]; then
    log "D√©ploiement annul√©"
    exit 0
fi

# Aller dans le r√©pertoire de l'application
cd "$APP_DIR" || error "Impossible d'acc√©der √† $APP_DIR"

# V√©rification de la structure minimale
log "üîç V√©rification de la structure..."

required_items=("frontend" "backend" "docker-compose.yml")
missing_items=()

for item in "${required_items[@]}"; do
    if [ ! -e "$item" ]; then
        missing_items+=("$item")
    fi
done

if [ ${#missing_items[@]} -gt 0 ]; then
    error "‚ùå √âl√©ments manquants: ${missing_items[*]}"
fi

info "‚úÖ Structure de base pr√©sente"

# Build du frontend (si possible)
log "üèóÔ∏è Tentative de build du frontend..."

if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
    cd frontend
    
    log "üì¶ Installation des d√©pendances..."
    if npm ci --production=false 2>/dev/null; then
        info "‚úÖ D√©pendances install√©es"
        
        log "üî® Build du frontend..."
        if npm run build 2>/dev/null; then
            info "‚úÖ Frontend build√© avec succ√®s"
        else
            warn "‚ö†Ô∏è  √âchec du build frontend, continue quand m√™me..."
        fi
    else
        warn "‚ö†Ô∏è  √âchec de l'installation des d√©pendances, continue quand m√™me..."
    fi
    
    cd "$APP_DIR"
else
    warn "‚ö†Ô∏è  Frontend non buildable, continue quand m√™me..."
fi

# Choix du fichier docker-compose
compose_file="$DOCKER_COMPOSE_FILE"
if [ -f "$DOCKER_COMPOSE_PROD_FILE" ]; then
    echo ""
    echo "Fichiers docker-compose disponibles:"
    echo "1. $DOCKER_COMPOSE_FILE (d√©veloppement)"
    echo "2. $DOCKER_COMPOSE_PROD_FILE (production)"
    echo ""
    read -p "Choisir le fichier (1/2): " choice
    
    if [ "$choice" = "2" ]; then
        compose_file="$DOCKER_COMPOSE_PROD_FILE"
        info "Utilisation du fichier de production: $compose_file"
    fi
fi

# D√©terminer la commande docker-compose
if command -v "docker compose" &> /dev/null; then
    DOCKER_COMPOSE_CMD="docker compose"
else
    DOCKER_COMPOSE_CMD="docker-compose"
fi

# V√©rification du r√©seau Docker
log "üåê V√©rification du r√©seau Docker..."
if ! docker network ls | grep -q "ajtpro_default"; then
    log "Cr√©ation du r√©seau ajtpro_default..."
    docker network create ajtpro_default || warn "√âchec de cr√©ation du r√©seau (peut d√©j√† exister)"
fi

# Arr√™t des services existants
log "‚èπÔ∏è Arr√™t des services existants..."
$DOCKER_COMPOSE_CMD -f "$compose_file" down --remove-orphans 2>/dev/null || warn "Erreur lors de l'arr√™t (non critique)"

# Nettoyage optionnel
read -p "üßπ Nettoyer les images Docker inutilis√©es? (y/N): " clean_images
if [[ $clean_images =~ ^[Yy]$ ]]; then
    log "Nettoyage des images..."
    docker system prune -f || warn "Erreur lors du nettoyage (non critique)"
fi

# Reconstruction et d√©marrage
log "üî® Reconstruction des images..."
$DOCKER_COMPOSE_CMD -f "$compose_file" build --no-cache || error "√âchec de la reconstruction"

log "üöÄ D√©marrage des services..."
$DOCKER_COMPOSE_CMD -f "$compose_file" up -d || error "√âchec du d√©marrage"

# Attente du d√©marrage
log "‚è≥ Attente du d√©marrage des services..."
sleep 15

# V√©rification du statut
log "üìä Statut des services:"
$DOCKER_COMPOSE_CMD -f "$compose_file" ps

# Tests de connectivit√© simples
echo ""
log "üè• Tests de connectivit√©..."

# Test frontend
if curl -f -s http://localhost:3000 >/dev/null 2>&1; then
    info "‚úÖ Frontend accessible (port 3000)"
else
    warn "‚ö†Ô∏è Frontend non accessible (port 3000)"
fi

# Test backend
if curl -f -s http://localhost:8000 >/dev/null 2>&1; then
    info "‚úÖ Backend accessible (port 8000)"
else
    warn "‚ö†Ô∏è Backend non accessible (port 8000)"
fi

# Test PostgreSQL
if docker exec postgres pg_isready -U ajt_user -d ajt_db >/dev/null 2>&1; then
    info "‚úÖ PostgreSQL accessible"
else
    warn "‚ö†Ô∏è PostgreSQL non accessible"
fi

# Informations finales
echo ""
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
log "üìã INFORMATIONS DE D√âPLOIEMENT"

local_ip=$(hostname -I | awk '{print $1}' 2>/dev/null || echo "localhost")

echo ""
echo "üåç URLs d'acc√®s:"
echo "  Frontend: http://$local_ip:3000"
echo "  Backend:  http://$local_ip:8000"
echo ""
echo "üîß Commandes utiles:"
echo "  Logs:     $DOCKER_COMPOSE_CMD -f $compose_file logs -f"
echo "  Statut:   $DOCKER_COMPOSE_CMD -f $compose_file ps"
echo "  Arr√™t:    $DOCKER_COMPOSE_CMD -f $compose_file down"
echo ""
echo "üìÅ R√©pertoire: $APP_DIR"
echo "üìÑ Config:     $compose_file"

# V√©rification finale
all_ok=true

echo ""
echo "üîç V√©rification finale:"

# V√©rifier que les containers sont en cours d'ex√©cution
expected_containers=("ajt_frontend" "ajt_backend" "postgres")
for container in "${expected_containers[@]}"; do
    if docker ps --format "{{.Names}}" | grep -q "^$container$"; then
        echo "  ‚úÖ $container en cours d'ex√©cution"
    else
        echo "  ‚ùå $container non trouv√©"
        all_ok=false
    fi
done

echo ""
if [ "$all_ok" = true ]; then
    log "üéâ D√©ploiement d'urgence termin√© avec succ√®s!"
    info "‚ö†Ô∏è  N'oubliez pas de corriger les probl√®mes Git et de sauvegarde plus tard"
    
    echo ""
    echo "üîÑ Pour corriger les probl√®mes identifi√©s:"
    echo "1. ./diagnostic.sh           # Analyser les probl√®mes"
    echo "2. ./fix-git.sh             # Corriger Git"
    echo "3. ./fix-backup.sh          # Corriger les sauvegardes"
    echo "4. ./deploy.sh install_prod # D√©ploiement normal"
else
    warn "‚ö†Ô∏è D√©ploiement partiellement r√©ussi - V√©rifiez les logs"
    echo ""
    echo "üîç Pour diagnostiquer:"
    echo "  $DOCKER_COMPOSE_CMD -f $compose_file logs"
fi

echo ""
echo "‚è∞ Dur√©e totale: $SECONDS secondes"